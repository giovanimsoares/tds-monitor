import * as React from "react";
import Stepper from "@material-ui/core/Stepper";
import Step from "@material-ui/core/Step";
import StepLabel from "@material-ui/core/StepLabel";
import Button from "@material-ui/core/Button";
import Typography from "@material-ui/core/Typography";
import { makeStyles, Theme, createStyles } from "@material-ui/core/styles";
import * as ini from "ini";

import {
  FormLabel,
  FormControl,
  FormControlLabel,
  RadioGroup,
  Radio,
  TextField,
  Checkbox
} from "@material-ui/core";
import { IMonitorItem } from "../src/monitorInterfaces";

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    root: {
      width: "100%"
    },
    button: {
      marginRight: theme.spacing(1)
    },
    instructions: {
      marginTop: theme.spacing(1),
      marginBottom: theme.spacing(1)
    },
    inputNone: {
      display: "none"
    }
  })
);

export default function Wizard(newServer) {
  const classes = useStyles();


  const getFileFromInput = (file: File): Promise<any> => {
    return new Promise(function(resolve, reject) {
      const reader = new FileReader();
      reader.onerror = reject;
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.readAsText(file);
    });
  };

  const getIniProp = (s: any, target: string): any => {
    for (const key in s) {
      if (key?.toLowerCase() === target?.toLowerCase()) {
        return s[key];
      }
    }
    return null;
  };

 

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const target = event.target;
    const name = target.name;
    const value =
      target.type === "checkbox"
        ? target.checked
        : target.type === "number"
        ? parseInt(target.value)
        : target.value;
console.log(target);
console.log(name);
console.log(value);

    setStateForm({ ...stateForm, [name]: value });
    // setServer({ ...server, [name]: value });
  };



  const testConnection = () => {
    return (
      <TextField
      name='buildVersion'
        label="Versão"
        helperText="Versão do servidor registrado."
        disabled
        value={stateForm.buildVersion}
        onChange={handleChange}
      />
    );
  };

  const getStepContent = (step: number) => {
    switch (step) {
      case 0:
        return (
          <FormControl component="fieldset">{selectServerType()}</FormControl>
        );
      case 1:
        return (
          <FormControl component="fieldset">
            {getConnectionInfo(false)}
          </FormControl>
        );
      case 2:
        return (
          <FormControl component="fieldset">
            {getConnectionInfo(true)}
            {testConnection()}
          </FormControl>
        );
      default:
        return "Unknown step";
    }
  };

  // if (activeStep === 2) {
  //   let command: IAddServerdAction = {
  //     action: WizardAction.Validate,
  //     content: stateForm
  //   };
  //   myVscode.postMessage(command);
  // }

  return (
    <div className={classes.root}>
      <Stepper activeStep={activeStep}>
        {steps.map((label, index) => {
          const stepProps: { completed?: boolean } = {};
          const labelProps: { optional?: React.ReactNode } = {};
          return (
            <Step key={label} {...stepProps}>
              <StepLabel {...labelProps}>{label}</StepLabel>
            </Step>
          );
        })}
      </Stepper>
      <div>
        {activeStep === steps.length ? (
          <div>
            <Typography className={classes.instructions}>
              All steps completed - you&apos;re finished
            </Typography>
            <Button onClick={handleReset} className={classes.button}>
              Reset
            </Button>
          </div>
        ) : (
          <div>
            <Typography className={classes.instructions}>
              {getStepContent(activeStep)}
            </Typography>
            <div>
              <Button
                disabled={activeStep === 0}
                onClick={handleBack}
                className={classes.button}
              >
                Back
              </Button>
              <Button
                variant="contained"
                color="primary"
                onClick={handleNext}
                className={classes.button}
              >
                {activeStep === steps.length - 1 ? "Finish" : "Next"}
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
